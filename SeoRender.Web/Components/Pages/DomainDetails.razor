@page "/stats/{Domain}"
@using SeoRender.Web.Data
@inject PreRenderDbContext Db

<PageTitle>@Domain Stats</PageTitle>

<div class="container">
    <h1 class="mb-4">@Domain</h1>

    <div class="card mb-3">
        <div class="card-body">
            <div class="input-group">
                <span class="input-group-text"><span class="bi bi-search"></span></span>
                <input class="form-control" placeholder="Search URIs" value="@search" @oninput="OnSearchChanged" />
            </div>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>URI</th>
                <th>Size</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var meta in PageItems)
        {
            <tr>
                <td>@meta.Url</td>
                <td>@GetSize(meta)</td>
            </tr>
        }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(_pageIndex == 0 ? "disabled" : null)">
                <button class="page-link" @onclick="PrevPage">Previous</button>
            </li>
            <li class="page-item @(((_pageIndex + 1) * PageSize >= filtered.Count) ? "disabled" : null)">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
</div>

@code {
    [Parameter] public string Domain { get; set; } = string.Empty;

    private const int PageSize = 10;
    private int _pageIndex;
    private string search = string.Empty;
    private List<RenderedPageMeta> filtered = new();

    protected override void OnParametersSet()
    {
        Load();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        _pageIndex = 0;
        Load();
    }

    private void Load()
    {
        var query = Db.Metas.Find(m => m.Domain == Domain);
        filtered = string.IsNullOrWhiteSpace(search)
            ? query.ToList()
            : query.Where(m => m.Url.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private IEnumerable<RenderedPageMeta> PageItems =>
        filtered.Skip(_pageIndex * PageSize).Take(PageSize);

    private string GetSize(RenderedPageMeta meta)
    {
        var file = Db.Storage.FindById(meta.ContentHash);
        var size = file?.Length ?? 0;
        return size > 1024 ? $"{size / 1024} KB" : $"{size} B";
    }

    private void PrevPage()
    {
        if (_pageIndex > 0)
        {
            _pageIndex--;
        }
    }

    private void NextPage()
    {
        if ((_pageIndex + 1) * PageSize < filtered.Count)
        {
            _pageIndex++;
        }
    }
}
